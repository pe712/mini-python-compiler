
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 17 17:37:17 CET 2024
//----------------------------------------------------

package mini_python;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 17 17:37:17 CET 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\005\000\002\003" +
    "\011\000\002\021\004\000\002\021\006\000\002\020\004" +
    "\000\002\020\006\000\002\020\011\000\002\020\010\000" +
    "\002\017\004\000\002\017\005\000\002\017\010\000\002" +
    "\017\006\000\002\017\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\006\000\002\022\004\000\002\022\004" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\006\000\002\022" +
    "\005\000\002\022\005\000\002\024\003\000\002\024\002" +
    "\000\002\023\005\000\002\023\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\013\003\000\002\013\002\000\002\012\003\000\002\012" +
    "\002\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\011\003\000\002\015\005\000\002\014\003\000" +
    "\002\016\003\000\002\005\004\000\002\005\002\000\002" +
    "\007\004\000\002\006\004\000\002\006\002\000\002\004" +
    "\003\000\002\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\032\004\uffca\005\uffca\011\uffca\012\uffca\014" +
    "\uffca\015\uffca\016\uffca\022\uffca\023\uffca\025\uffca\034\006" +
    "\036\uffca\001\002\000\004\002\164\001\002\000\030\004" +
    "\uffcf\005\uffcf\011\010\012\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\022\uffcf\023\uffcf\025\uffcf\036\uffcf\001\002\000\030\004" +
    "\uffcb\005\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\022\uffcb\023\uffcb\025\uffcb\036\uffcb\001\002\000\026\004" +
    "\112\005\031\012\126\014\120\015\115\016\123\022\032" +
    "\023\033\025\030\036\034\001\002\000\004\004\013\001" +
    "\002\000\030\004\uffcf\005\uffcf\011\010\012\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\022\uffcf\023\uffcf\025\uffcf\036\uffcf\001" +
    "\002\000\026\004\uffd0\005\uffd0\012\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\022\uffd0\023\uffd0\025\uffd0\036\uffd0\001\002\000" +
    "\004\023\014\001\002\000\006\004\016\024\uffd8\001\002" +
    "\000\006\024\uffd9\027\024\001\002\000\010\024\uffd2\027" +
    "\uffd2\030\027\001\002\000\004\024\110\001\002\000\006" +
    "\024\uffd5\027\uffd5\001\002\000\006\024\uffd4\027\022\001" +
    "\002\000\004\004\016\001\002\000\006\024\uffd7\027\uffd7" +
    "\001\002\000\004\004\025\001\002\000\004\030\027\001" +
    "\002\000\006\024\uffd6\027\uffd6\001\002\000\016\004\035" +
    "\005\031\022\032\023\033\025\030\036\034\001\002\000" +
    "\020\004\035\005\031\022\032\023\033\025\030\026\uffe2" +
    "\036\034\001\002\000\036\006\ufff3\020\ufff3\021\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\001\002\000\016\004" +
    "\035\005\031\022\032\023\033\025\030\036\034\001\002" +
    "\000\016\004\035\005\031\022\032\023\033\025\030\036" +
    "\034\001\002\000\016\004\035\005\031\022\032\023\033" +
    "\025\030\036\034\001\002\000\040\006\ufff2\020\ufff2\021" +
    "\ufff2\023\062\024\ufff2\025\ufff2\026\ufff2\027\ufff2\031\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001" +
    "\002\000\030\006\042\020\040\021\047\024\uffd3\025\041" +
    "\027\uffd3\035\044\036\037\037\046\040\045\041\043\001" +
    "\002\000\016\004\035\005\031\022\032\023\033\025\030" +
    "\036\034\001\002\000\016\004\035\005\031\022\032\023" +
    "\033\025\030\036\034\001\002\000\016\004\035\005\031" +
    "\022\032\023\033\025\030\036\034\001\002\000\016\004" +
    "\035\005\031\022\032\023\033\025\030\036\034\001\002" +
    "\000\016\004\035\005\031\022\032\023\033\025\030\036" +
    "\034\001\002\000\016\004\035\005\031\022\032\023\033" +
    "\025\030\036\034\001\002\000\016\004\035\005\031\022" +
    "\032\023\033\025\030\036\034\001\002\000\016\004\035" +
    "\005\031\022\032\023\033\025\030\036\034\001\002\000" +
    "\016\004\035\005\031\022\032\023\033\025\030\036\034" +
    "\001\002\000\036\006\042\020\040\021\uffe7\024\uffe7\025" +
    "\041\026\uffe7\027\uffe7\031\uffe7\034\uffe7\035\044\036\037" +
    "\037\046\040\045\041\043\001\002\000\036\006\uffec\020" +
    "\uffec\021\uffec\024\uffec\025\041\026\uffec\027\uffec\031\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\001" +
    "\002\000\036\006\uffeb\020\uffeb\021\uffeb\024\uffeb\025\041" +
    "\026\uffeb\027\uffeb\031\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\001\002\000\036\006\uffee\020\uffee" +
    "\021\uffee\024\uffee\025\041\026\uffee\027\uffee\031\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\046\040\045\041\043\001\002" +
    "\000\036\006\uffea\020\uffea\021\uffea\024\uffea\025\041\026" +
    "\uffea\027\uffea\031\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\001\002\000\034\020\uffe9\021\uffe9\024" +
    "\uffe9\025\041\026\uffe9\027\uffe9\031\uffe9\034\uffe9\035\044" +
    "\036\037\037\046\040\045\041\043\001\002\000\026\006" +
    "\042\020\040\021\047\025\041\026\057\035\044\036\037" +
    "\037\046\040\045\041\043\001\002\000\036\006\ufff1\020" +
    "\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\031\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001" +
    "\002\000\036\006\042\020\uffe8\021\uffe8\024\uffe8\025\041" +
    "\026\uffe8\027\uffe8\031\uffe8\034\uffe8\035\044\036\037\037" +
    "\046\040\045\041\043\001\002\000\036\006\uffed\020\uffed" +
    "\021\uffed\024\uffed\025\041\026\uffed\027\uffed\031\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\046\040\045\041\043\001\002" +
    "\000\020\004\064\005\031\022\032\023\033\024\uffda\025" +
    "\030\036\034\001\002\000\006\024\uffdc\027\074\001\002" +
    "\000\034\006\ufff2\020\ufff2\021\ufff2\023\062\024\ufff2\025" +
    "\ufff2\027\ufff2\030\027\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\001\002\000\006\024\uffdd\027\uffdd\001\002\000" +
    "\004\024\073\001\002\000\006\024\uffdb\027\071\001\002" +
    "\000\030\006\042\020\040\021\047\024\uffd1\025\041\027" +
    "\uffd1\035\044\036\037\037\046\040\045\041\043\001\002" +
    "\000\004\004\025\001\002\000\006\024\uffde\027\uffde\001" +
    "\002\000\036\006\uffe6\020\uffe6\021\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\031\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\016\004\064\005\031" +
    "\022\032\023\033\025\030\036\034\001\002\000\006\024" +
    "\uffdf\027\uffdf\001\002\000\036\006\ufff0\020\ufff0\021\ufff0" +
    "\024\ufff0\025\041\026\ufff0\027\ufff0\031\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\001\002\000\026" +
    "\006\042\020\040\021\047\024\100\025\041\035\044\036" +
    "\037\037\046\040\045\041\043\001\002\000\036\006\uffe4" +
    "\020\uffe4\021\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\001\002\000\036\006\042\020\uffef\021\uffef\024\uffef\025" +
    "\041\026\uffef\027\uffef\031\uffef\034\uffef\035\044\036\037" +
    "\037\046\040\045\041\043\001\002\000\004\026\107\001" +
    "\002\000\004\026\uffe3\001\002\000\030\006\042\020\040" +
    "\021\047\025\041\026\uffe0\027\105\035\044\036\037\037" +
    "\046\040\045\041\043\001\002\000\016\004\035\005\031" +
    "\022\032\023\033\025\030\036\034\001\002\000\004\026" +
    "\uffe1\001\002\000\036\006\uffe5\020\uffe5\021\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\031\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002\000\004\031\111" +
    "\001\002\000\024\004\112\005\031\014\120\015\115\022" +
    "\032\023\033\025\030\034\117\036\034\001\002\000\032" +
    "\006\ufff2\020\ufff2\021\ufff2\023\062\025\ufff2\030\161\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001\002" +
    "\000\030\004\uffff\005\uffff\011\uffff\012\uffff\014\uffff\015" +
    "\uffff\016\uffff\022\uffff\023\uffff\025\uffff\036\uffff\001\002" +
    "\000\004\034\160\001\002\000\004\023\155\001\002\000" +
    "\026\006\042\020\040\021\047\025\150\034\ufff4\035\044" +
    "\036\037\037\046\040\045\041\043\001\002\000\004\032" +
    "\122\001\002\000\016\004\035\005\031\022\032\023\033" +
    "\025\030\036\034\001\002\000\026\006\042\020\040\021" +
    "\047\025\041\034\ufff8\035\044\036\037\037\046\040\045" +
    "\041\043\001\002\000\026\004\112\005\031\012\126\014" +
    "\120\015\115\016\123\022\032\023\033\025\030\036\034" +
    "\001\002\000\004\004\143\001\002\000\032\002\uffcc\004" +
    "\112\005\031\012\126\014\120\015\115\016\123\022\032" +
    "\023\033\025\030\033\uffcc\036\034\001\002\000\004\033" +
    "\137\001\002\000\016\004\035\005\031\022\032\023\033" +
    "\025\030\036\034\001\002\000\004\034\130\001\002\000" +
    "\032\002\ufffc\004\ufffc\005\ufffc\012\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\022\ufffc\023\ufffc\025\ufffc\033\ufffc\036\ufffc\001" +
    "\002\000\026\006\042\020\040\021\047\025\041\031\132" +
    "\035\044\036\037\037\046\040\045\041\043\001\002\000" +
    "\024\004\112\005\031\014\120\015\115\022\032\023\033" +
    "\025\030\034\117\036\034\001\002\000\034\002\ufffb\004" +
    "\ufffb\005\ufffb\012\ufffb\013\134\014\ufffb\015\ufffb\016\ufffb" +
    "\022\ufffb\023\ufffb\025\ufffb\033\ufffb\036\ufffb\001\002\000" +
    "\004\031\135\001\002\000\024\004\112\005\031\014\120" +
    "\015\115\022\032\023\033\025\030\034\117\036\034\001" +
    "\002\000\032\002\ufffa\004\ufffa\005\ufffa\012\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\022\ufffa\023\ufffa\025\ufffa\033\ufffa\036" +
    "\ufffa\001\002\000\036\002\ufffd\004\ufffd\005\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\022\ufffd\023" +
    "\ufffd\025\ufffd\033\ufffd\036\ufffd\001\002\000\032\002\uffcc" +
    "\004\112\005\031\012\126\014\120\015\115\016\123\022" +
    "\032\023\033\025\030\033\uffcc\036\034\001\002\000\006" +
    "\002\uffce\033\uffce\001\002\000\006\002\uffcd\033\uffcd\001" +
    "\002\000\004\017\144\001\002\000\016\004\035\005\031" +
    "\022\032\023\033\025\030\036\034\001\002\000\026\006" +
    "\042\020\040\021\047\025\041\031\146\035\044\036\037" +
    "\037\046\040\045\041\043\001\002\000\024\004\112\005" +
    "\031\014\120\015\115\022\032\023\033\025\030\034\117" +
    "\036\034\001\002\000\032\002\ufff9\004\ufff9\005\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\022\ufff9\023\ufff9\025\ufff9" +
    "\033\ufff9\036\ufff9\001\002\000\016\004\035\005\031\022" +
    "\032\023\033\025\030\036\034\001\002\000\026\006\042" +
    "\020\040\021\047\025\041\026\152\035\044\036\037\037" +
    "\046\040\045\041\043\001\002\000\030\006\ufff1\020\ufff1" +
    "\021\ufff1\025\ufff1\030\153\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\001\002\000\016\004\035\005\031" +
    "\022\032\023\033\025\030\036\034\001\002\000\026\006" +
    "\042\020\040\021\047\025\041\034\ufff6\035\044\036\037" +
    "\037\046\040\045\041\043\001\002\000\016\004\035\005" +
    "\031\022\032\023\033\025\030\036\034\001\002\000\026" +
    "\006\042\020\040\021\047\024\157\025\041\035\044\036" +
    "\037\037\046\040\045\041\043\001\002\000\004\034\ufff5" +
    "\001\002\000\036\002\ufffe\004\ufffe\005\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\022\ufffe\023\ufffe" +
    "\025\ufffe\033\ufffe\036\ufffe\001\002\000\016\004\035\005" +
    "\031\022\032\023\033\025\030\036\034\001\002\000\026" +
    "\006\042\020\040\021\047\025\041\034\ufff7\035\044\036" +
    "\037\037\046\040\045\041\043\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\010\005\006\001\001\000\002\001\001" +
    "\000\012\007\162\017\126\020\123\022\115\001\001\000" +
    "\002\001\001\000\006\003\010\005\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\014\012\016\014" +
    "\020\015\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\022\014\020\015\017\001\001\000\002\001\001" +
    "\000\004\015\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\035\001\001\000\010\022\103\023\102" +
    "\024\101\001\001\000\002\001\001\000\004\022\100\001" +
    "\001\000\004\022\076\001\001\000\004\022\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\060\001" +
    "\001\000\004\022\057\001\001\000\004\022\055\001\001" +
    "\000\004\022\054\001\001\000\004\022\053\001\001\000" +
    "\004\022\052\001\001\000\004\022\051\001\001\000\004" +
    "\022\050\001\001\000\004\022\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\066\013\065\015\064\016\062\022\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\074\015\064\016\062\022\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\103\023\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\113\021\112\022\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\120\001\001\000\002" +
    "\001\001\000\012\007\124\017\126\020\123\022\115\001" +
    "\001\000\002\001\001\000\012\006\140\017\126\020\137" +
    "\022\115\001\001\000\002\001\001\000\004\022\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\113\021\132\022\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\113\021\135\022\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\141\017\126\020\137\022\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\144\001" +
    "\001\000\002\001\001\000\010\017\113\021\146\022\115" +
    "\001\001\000\002\001\001\000\004\022\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\153\001\001" +
    "\000\002\001\001\000\004\022\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opt_newline ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_newline",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opt_newline ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_newline",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_stmt ::= 
            {
              LinkedList<Stmt> RESULT =null;
		 RESULT = new LinkedList<Stmt>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_stmt ::= stmt list_stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nonempty_list_stmt ::= stmt list_stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_def ::= 
            {
              LinkedList<Def> RESULT =null;
		 RESULT = new LinkedList<Def>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_def ::= def list_def 
            {
              LinkedList<Def> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Def> l = (LinkedList<Def>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(d); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // argument ::= expr 
            {
              Parameter RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameter ::= IDENT 
            {
              Parameter RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident x = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(null, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // optional_parameter ::= IDENT EQUAL expr 
            {
              Parameter RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident x = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(e, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_parameter",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nonempty_list_comma_param ::= parameter 
            {
              LinkedList<Parameter> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    LinkedList<Parameter> l = new LinkedList<Parameter>();
    l.add(x); RESULT = l; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nonempty_list_comma_param ::= optional_parameter 
            {
              LinkedList<Parameter> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    LinkedList<Parameter> l = new LinkedList<Parameter>();
    l.add(x); RESULT = l; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nonempty_list_comma_param ::= nonempty_list_comma_param COMMA optional_parameter 
            {
              LinkedList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nonempty_list_comma_param ::= parameter COMMA nonempty_list_comma_param 
            {
              LinkedList<Parameter> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_comma_param ::= 
            {
              LinkedList<Parameter> RESULT =null;
		 RESULT = new LinkedList<Parameter>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_comma_param ::= nonempty_list_comma_param 
            {
              LinkedList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_comma_args ::= 
            {
              LinkedList<Parameter> RESULT =null;
		 RESULT = new LinkedList<Parameter>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_args",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_comma_args ::= nonempty_list_comma_args 
            {
              LinkedList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_args",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nonempty_list_comma_args ::= argument 
            {
              LinkedList<Parameter> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    LinkedList<Parameter> l = new LinkedList<Parameter>();
    l.add(x); RESULT = l; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_args",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nonempty_list_comma_args ::= optional_parameter 
            {
              LinkedList<Parameter> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    LinkedList<Parameter> l = new LinkedList<Parameter>();
    l.add(x); RESULT = l; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_args",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nonempty_list_comma_args ::= nonempty_list_comma_args COMMA optional_parameter 
            {
              LinkedList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_args",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nonempty_list_comma_args ::= argument COMMA nonempty_list_comma_args 
            {
              LinkedList<Parameter> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameter x = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_args",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expr> l = new LinkedList<Expr>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expr> l = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_comma_expr ::= 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<Expr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expr> l = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= LP expr RP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= LSQ list_comma_expr RSQ 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expr> l = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Elist(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= IDENT LP list_comma_args RP 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident f = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Ecall (f, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(Binop.Bor, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(Binop.Band, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr CMP expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binop c = (Binop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(c, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(Binop.Bmod, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(Binop.Bdiv, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(Binop.Bmul, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(Binop.Bsub, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ebinop(Binop.Badd, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Eunop(Unop.Unot, e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Eunop(Unop.Uneg, e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr LSQ expr RSQ 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Eget(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Eident(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= CST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ecst(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_stmt ::= expr 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Seval(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_stmt ::= PRINT LP expr RP 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Sprint(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_stmt ::= expr LSQ expr RSQ EQUAL expr 
            {
              Stmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Sset(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_stmt ::= IDENT EQUAL expr 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Sassign(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_stmt ::= RETURN expr 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Sreturn(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= FOR IDENT IN expr COLON suite 
            {
              Stmt RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Ident x = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Sfor(x, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= IF expr COLON suite ELSE COLON suite 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Sif(c, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= IF expr COLON suite 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Sif(c, s, new Sblock()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= simple_stmt NEWLINE 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // suite ::= NEWLINE BEGIN nonempty_list_stmt END 
            {
              Stmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sblock(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // suite ::= simple_stmt NEWLINE 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // def ::= DEF IDENT LP list_comma_param RP COLON suite 
            {
              Def RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Ident f = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Parameter> x = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Def(f, x, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= opt_newline list_def nonempty_list_stmt 
            {
              File RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Def> l = (LinkedList<Def>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Stmt> b = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new File(l, new Sblock(b)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		File start_val = (File)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

